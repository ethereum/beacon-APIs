get:
  tags:
    - ValidatorRequiredApi
    - Validator
  operationId: "produceBlockV3"
  summary: "Produce a new block, without signature."
  description: |
    Requests a beacon node to produce a valid block, which can then be signed by a validator. The
    returned block may be blinded or unblinded, depending on the current state of the network as
    decided by the execution and beacon nodes.

    The beacon node must return an unblinded block if it obtains the execution payload from its
    paired execution node. It must only return a blinded block if it obtains the execution payload
    header from an MEV relay.

    Metadata in the response indicates the type of block produced, and the supported types of block
    will be added to as forks progress.
  parameters:
    - name: slot
      in: path
      required: true
      description: "The slot for which the block should be proposed."
      schema:
        $ref: "../../beacon-node-oapi.yaml#/components/schemas/Uint64"
    - name: randao_reveal
      in: query
      required: true
      description: "The validator's randao reveal value."
      schema:
        $ref: '../../beacon-node-oapi.yaml#/components/schemas/Signature'
    - name: graffiti
      in: query
      required: false
      description: "Arbitrary data validator wants to include in block."
      schema:
        $ref: '../../beacon-node-oapi.yaml#/components/schemas/Graffiti'
    - name: skip_randao_verification
      $ref: '../../beacon-node-oapi.yaml#/components/parameters/SkipRandaoVerification'
    - name: builder_boost_factor
      in: query
      required: false
      description: |
        Percentage multiplier to apply to the builder's payload value when choosing between a
        builder payload header and payload from the paired execution node. This parameter is only
        relevant if the beacon node is connected to a builder, deems it safe to produce a builder
        payload, and receives valid responses from both the builder endpoint _and_ the paired
        execution node. When these preconditions are met, the server MUST act as follows:

        * if `exec_node_payload_value >= builder_boost_factor * (builder_payload_value // 100)`,
          then return a full (unblinded) block containing the execution node payload.
        * otherwise, return a blinded block containing the builder payload header.

        Servers must support the following values of the boost factor which encode common
        preferences:

        * `builder_boost_factor=0`: prefer the execution node payload unless an error makes it
          unviable.
        * `builder_boost_factor=100`: default profit maximization mode; choose whichever
          payload pays more.
        * `builder_boost_factor=2**64 - 1`: prefer the builder payload unless an error or
          beacon node health check makes it unviable.

        Servers should use saturating arithmetic or another technique to ensure that large values of
        the `builder_boost_factor` do not trigger overflows or errors. If this parameter is
        provided and the beacon node is not configured with a builder then the beacon node MUST
        respond with a full block, which the caller can choose to reject if it wishes. If this
        parameter is **not** provided then it should be treated as having the default value of 100.
        If the value is provided but out of range for a 64-bit unsigned integer, then an error
        response with status code 400 MUST be returned.
      schema:
        $ref: "../../beacon-node-oapi.yaml#/components/schemas/Uint64"
  responses:
    "200":
      description: Success response
      headers:
        Eth-Consensus-Version:
          $ref: '../../beacon-node-oapi.yaml#/components/headers/Eth-Consensus-Version'
        Eth-Execution-Payload-Blinded:
          $ref: '../../beacon-node-oapi.yaml#/components/headers/Eth-Execution-Payload-Blinded'
        Eth-Execution-Payload-Value:
          $ref: '../../beacon-node-oapi.yaml#/components/headers/Eth-Execution-Payload-Value'
        Eth-Consensus-Block-Value:
          $ref: '../../beacon-node-oapi.yaml#/components/headers/Eth-Consensus-Block-Value'
      content:
        application/json:
          schema:
            title: ProduceBlockV3Response
            type: object
            required: [version, execution_payload_blinded, execution_payload_value, consensus_block_value, data]
            properties:
              version:
                type: string
                enum: [ phase0, altair, bellatrix, capella, deneb ]
                example: "phase0"
              execution_payload_blinded:
                type: boolean
                example: false
              execution_payload_value:
                type: string
                example: "12345"
              consensus_block_value:
                type: string
                example: "12345"
              data:
                anyOf:
                 - $ref: "../../beacon-node-oapi.yaml#/components/schemas/BeaconBlock"
                 - $ref: "../../beacon-node-oapi.yaml#/components/schemas/Altair.BeaconBlock"
                 - $ref: "../../beacon-node-oapi.yaml#/components/schemas/Bellatrix.BeaconBlock"
                 - $ref: "../../beacon-node-oapi.yaml#/components/schemas/Bellatrix.BlindedBeaconBlock"
                 - $ref: "../../beacon-node-oapi.yaml#/components/schemas/Capella.BeaconBlock"
                 - $ref: "../../beacon-node-oapi.yaml#/components/schemas/Capella.BlindedBeaconBlock"
                 - $ref: "../../beacon-node-oapi.yaml#/components/schemas/Deneb.BlockContents"
                 - $ref: "../../beacon-node-oapi.yaml#/components/schemas/Deneb.BlindedBeaconBlock"
        application/octet-stream:
          schema:
            description: "SSZ serialized block or blinded block bytes. Use Accept header to choose this response type, version string is sent in header `Eth-Consensus-Version` and block type in `Eth-Blinded-Payload`."
    "400":
      description: "Invalid block production request"
      content:
        application/json:
          schema:
            $ref: "../../beacon-node-oapi.yaml#/components/schemas/ErrorMessage"
          examples:
            InvalidRequest:
              value:
                code: 400
                message: "Invalid request to produce a block"
    "500":
      $ref: '../../beacon-node-oapi.yaml#/components/responses/InternalError'
    "503":
      $ref: '../../beacon-node-oapi.yaml#/components/responses/CurrentlySyncing'
